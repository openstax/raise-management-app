/* tslint:disable */
/* eslint-disable */
/**
 * OpenStax RAISE Management Application API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    HTTPValidationError,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    Study,
    StudyFromJSON,
    StudyToJSON,
    StudyCreate,
    StudyCreateFromJSON,
    StudyCreateToJSON,
    StudyStatus,
    StudyStatusFromJSON,
    StudyStatusToJSON,
} from '../models';

export interface CreateStudyStudiesPostRequest {
    studyCreate: StudyCreate;
}

export interface UpdateStudyStatusStudiesStudyIdStatusPutRequest {
    studyId: number;
    studyStatus: StudyStatus;
}

/**
 * 
 */
export class StudiesApi extends runtime.BaseAPI {

    /**
     * Create Study
     */
    async createStudyStudiesPostRaw(requestParameters: CreateStudyStudiesPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Study>> {
        if (requestParameters.studyCreate === null || requestParameters.studyCreate === undefined) {
            throw new runtime.RequiredError('studyCreate','Required parameter requestParameters.studyCreate was null or undefined when calling createStudyStudiesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/studies/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StudyCreateToJSON(requestParameters.studyCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudyFromJSON(jsonValue));
    }

    /**
     * Create Study
     */
    async createStudyStudiesPost(requestParameters: CreateStudyStudiesPostRequest, initOverrides?: RequestInit): Promise<Study> {
        const response = await this.createStudyStudiesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Studies
     */
    async listStudiesStudiesGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Study>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/studies/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StudyFromJSON));
    }

    /**
     * List Studies
     */
    async listStudiesStudiesGet(initOverrides?: RequestInit): Promise<Array<Study>> {
        const response = await this.listStudiesStudiesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update Study Status
     */
    async updateStudyStatusStudiesStudyIdStatusPutRaw(requestParameters: UpdateStudyStatusStudiesStudyIdStatusPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Study>> {
        if (requestParameters.studyId === null || requestParameters.studyId === undefined) {
            throw new runtime.RequiredError('studyId','Required parameter requestParameters.studyId was null or undefined when calling updateStudyStatusStudiesStudyIdStatusPut.');
        }

        if (requestParameters.studyStatus === null || requestParameters.studyStatus === undefined) {
            throw new runtime.RequiredError('studyStatus','Required parameter requestParameters.studyStatus was null or undefined when calling updateStudyStatusStudiesStudyIdStatusPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/studies/{study_id}/status`.replace(`{${"study_id"}}`, encodeURIComponent(String(requestParameters.studyId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StudyStatusToJSON(requestParameters.studyStatus),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudyFromJSON(jsonValue));
    }

    /**
     * Update Study Status
     */
    async updateStudyStatusStudiesStudyIdStatusPut(requestParameters: UpdateStudyStatusStudiesStudyIdStatusPutRequest, initOverrides?: RequestInit): Promise<Study> {
        const response = await this.updateStudyStatusStudiesStudyIdStatusPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
